#!/usr/bin/env perl

use v5.10.1;
use warnings;
use strict;

use File::Spec;
use File::Basename qw/ dirname /;
use Cwd qw/ getcwd abs_path /;
use lib (dirname(abs_path($0)));

use Bluto::Log qw/debug/;
use Bluto::Cmd;
use Bluto;

Bluto::Cmd::register_param("version", undef, "version", undef);
Bluto::Cmd::register_param("out_dir", File::Spec->catfile(getcwd, 'bluto_build'), undef, "o");
Bluto::Cmd::register_param("feed_dir", undef, "feed-dir", undef);
Bluto::Cmd::register_param("content_dir", undef, "code-dir", "c");
Bluto::Cmd::register_param("readme", undef, undef, undef);

Bluto::Cmd::process_param();

my $version = Bluto::Cmd::get_version();
if (!defined $version) {
	die("version missing");
}

my $ym = Bluto::Cmd::base_config();
my $yv = Bluto::Cmd::release_config();
my $env = Bluto::Cmd::params();
if (!defined $env) {
	die("not sane");
}

my $version = Bluto::from_yaml($ym, $yv, $env);
if (!defined $version) {
	die("config processing failed");
}

my $announce = Bluto::create_announce($env);
if (!defined $announce) {
	die("announce processing failed");
}

my $rss = Bluto::create_rss($env);
if (!defined $rss) {
	die("rss processing failed");
}
